---
# Role to deploy a Docker server
- name: Install prereqs from apt
  become: yes
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - python3-virtualenv
      - python3-pip
      - python3-apt

- name: Install docker-py and docker-compose from pip
  become: yes
  pip:
    name: "{{ item.name }}"
    version: "{{ item.version }}"
    state: present
  with_items:
     - { name: 'docker-py', version: '1.10.6' }
     - { name: 'docker-compose', version: '1.9.0' }

- name: Install apt key for Docker
  become: yes
  apt_key: url=https://download.docker.com/linux/{{ ansible_distribution|lower() }}/gpg

- name: Install apt repository for Docker
  become: yes
  apt_repository: repo="deb https://download.docker.com/linux/{{ ansible_distribution | lower() }} {{ ansible_distribution_release }} stable"

- name: Create docker group
  become: yes
  group: name=docker

- name: Add users to docker group
  become: yes
  user: name={{ item }} groups=docker
  with_items: "{{ docker_users }}"

- name: Install Docker Engine
  become: yes
  apt:
    name:
      - docker-ce={{ docker_version }}
      - docker-ce-cli={{ docker_version }}
      - containerd.io

- name: Create /etc/docker
  become: yes
  file: 
    path: /etc/docker
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: install Docker daemon.json config
  become: yes
  copy:
    src: daemon.json
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0644

- name: Create systemd configuration directory for Docker
  become: yes
  file: path=/etc/systemd/system/docker.service.d state=directory

- name: Copy docker-opts.conf for systemd
  become: yes
  template: src=docker-opts.conf.j2 dest=/etc/systemd/system/docker.service.d/docker-opts.conf
  register: docker_opts

- name: systemctl daemon-reload
  become: yes
  command: systemctl daemon-reload
  when: docker_opts.changed

- name: Restart Docker
  become: yes
  service: name=docker state=restarted
  when: docker_opts.changed

- name: Check for Docker config
  become: yes
  stat:
    path: "~/.docker/config.json"
  register: stat_docker_config
  when: docker_image_repo|default(false)

- name: Log in to Docker image repository
  become: yes
  docker_login:
    registry_url: "{{ docker_image_repo.registry_url|default(omit) }}"
    username: "{{ docker_image_repo.username }}"
    password: "{{ docker_image_repo.password }}"
  when: docker_image_repo|default(false) and not stat_docker_config.exists|default(false)
