---
- name: Collect module names
  uri:
    url: "{{ okapi_url }}/_/discovery/modules"
    headers:
      X-Okapi-Tenant: "supertenant"
      Accept: application/json
    status_code: 200
  register: disco_results

- name: set list of discovered modules
  set_fact:
    service_identifiers: "{{ disco_results.json | json_query('[].srvcId')}}"

- name: initialize required mods dictionary
  set_fact:
    required_mods: {}

- name: select module versions
  set_fact:
    required_mods: "{{required_mods| combine({item.name: (service_identifiers | select('match', item.query) | list | max)}) }}"
  with_items:
    - name: mod-login
      query: '^mod-login-\d.*\d$'
    - name: mod-permissions
      query: '^mod-permissions-\d.*\d$'
    - name: mod-authtoken
      query: '^mod-authtoken-\d.*\d$'
    - name: mod-users
      query: '^mod-users-\d.*\d$'

- name: Check if mod-users and mod-permissions are already enabled on supertenant
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/supertenant/modules/{{ item }}"
    headers:
      X-Okapi-Tenant: "supertenant"
      Accept: application/json
    status_code: 200, 404
  register: tenant_module_check
  with_items:
    - "{{ required_mods['mod-users'] }}"
    - "{{ required_mods['mod-permissions'] }}"

- name: Enable mod-users and mod-permissions on supertenant
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/supertenant/modules"
    headers:
      X-Okapi-Tenant: "supertenant"
      Accept: application/json
    method: POST
    body_format: json
    body: '{ "id" : "{{ item.item }}" }'
    status_code: 201
  register: tenant_module_enable
  changed_when: tenant_module_enable.status == 201
  when: item.status == 404
  with_items: "{{ tenant_module_check.results }}"

- name: Check if mod-login is enabled on supertenant
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/supertenant/modules/{{ required_mods['mod-login'] }}"
    headers:
      X-Okapi-Tenant: "supertenant"
      Accept: application/json
    status_code: 200, 404
  register: mod_login_check

- name: Enable mod-login on supertenant
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/supertenant/modules"
    method: POST
    headers:
      X-Okapi-Tenant: "supertenant"
      Accept: application/json
    body_format: json
    body: '{ "id" : "{{ required_mods["mod-login"] }}" }'
    status_code: 201
  register: mod_login_enable
  changed_when: mod_login_enable.status == 201
  when: mod_login_check.status == 404

- name: Check if superuser has already been created on supertenant
  uri:
    url: "{{ okapi_url }}/users/{{ superuser_username | to_uuid }}"
    headers:
      X-Okapi-Tenant: "supertenant"
      Accept: application/json
      X-Okapi-Token: "{{ supertenant_token | default('') }}"
    status_code: 200, 404
  register: superuser_created_check

- name: Create superuser in mod-users on supertenant
  uri:
    url: "{{ okapi_url }}/users"
    method: POST
    headers:
      X-Okapi-Tenant: "supertenant"
      Accept: application/json
      X-Okapi-Token: "{{ supertenant_token | default('') }}"
    body_format: json
    body: '{ "id": "{{ superuser_username | to_uuid }}", "username": "{{ superuser_username }}", "active": "true"}'
    status_code: 201
  register: superuser_mod_users
  changed_when: superuser_mod_users.status == 201
  when: superuser_created_check.status == 404

- name: add permissions for superuser on supertenant
  uri:
    url: "{{ okapi_url }}/perms/users"
    method: POST
    headers:
      X-Okapi-Tenant: "supertenant"
      Accept: application/json
      X-Okapi-Token: "{{ supertenant_token | default('') }}"
    body_format: json
    body: '{"userId": "{{ superuser_username | to_uuid }}", "permissions":[ "okapi.all", "okapi.proxy.pull.modules.post", "perms.all", "login.all", "users.all" ] }'
    status_code: 201
  when: superuser_created_check.status == 404 and superuser_mod_users.status == 201

- name: Check if superuser credentials are created on supertenant
  uri:
    url: "{{ okapi_url }}/authn/credentials-existence?userId={{ superuser_username | to_uuid }}"
    headers:
      X-Okapi-Tenant: "supertenant"
      Accept: application/json
      X-Okapi-Token: "{{ supertenant_token | default('') }}"
    status_code: 200
  register: superuser_creds_check

- name: Create login credentials for on supertenant
  uri:
    url: "{{ okapi_url }}/authn/credentials"
    method: POST
    headers:
      X-Okapi-Tenant: "supertenant"
      Accept: application/json
      X-Okapi-Token: "{{ supertenant_token | default('') }}"
    body_format: json
    body: '{"username": "{{ superuser_username }}", "password": "{{ superuser_password }}"}'
    status_code: 201
  register: login_credentials_created
  when: superuser_creds_check.json.credentialsExist == false

- name: Check if mod-authtoken is enabled on supertenant
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/supertenant/modules/{{ required_mods['mod-authtoken'] }}"
    headers:
      X-Okapi-Tenant: "supertenant"
      Accept: application/json
    status_code: 200, 404
  register: mod_authtoken_check

- name: Enable mod-authtoken on supertenant
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/supertenant/modules"
    method: POST
    body_format: json
    body: '{ "id" : "{{ required_mods["mod-authtoken"] }}" }'
    status_code: 201
  register: mod_authtoken_enable
  changed_when: mod_authtoken_enable.status == 201
  when: mod_authtoken_check.status == 404
