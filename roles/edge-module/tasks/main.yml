---
# Setup
- name: Create configuration directory
  become: yes
  file:
    path: "{{ edge_conf_dir }}"
    state: directory

- name: Copy authentication store
  become: yes
  template:
    src: ephemeral.properties
    dest: "{{ edge_conf_dir }}/{{ edge_module }}-ephemeral.properties"

# Set up institutional user
- name: Login as {{ admin_user.username }}
  uri:
    url: "{{ okapi_url }}/authn/login"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: "{{ tenant }}"
      Accept: application/json
    body: "{ 'username' : '{{ admin_user.username }}', 'password' : '{{ admin_user.password }}' }"
    status_code: 201
  register: tenant_admin_login
  when: auth_required

- name: Check institutional user
  uri:
    url: "{{ okapi_url }}/users?query=username%3d%3d{{ inst_user.username }}"
    headers:
      X-Okapi-Tenant: "{{ tenant }}"
      X-Okapi-Token: "{{ tenant_admin_login.x_okapi_token|default('token') }}"
      Accept: application/json
    status_code: 200
  register: check_inst_user

- name: Create institutional user
  uri:
    url: "{{ okapi_url }}/users"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: "{{ tenant }}"
      X-Okapi-Token: "{{ tenant_admin_login.x_okapi_token|default('token') }}"
      Accept: application/json
    body: |
      {
        "id": "{{ 9999999999999999999998 | random | to_uuid }}",
        "username": "{{ inst_user.username }}",
        "active": true
      }
    status_code: 201
  when: check_inst_user.json.totalRecords == 0
  register: create_inst_user
  changed_when: create_inst_user.status == 201

- name: Get institutional user UUID variable
  set_fact:
    inst_user_uuid: "{% if check_inst_user.json.users.0|default(false) %}{{ check_inst_user.json.users.0.id }}{% else %}{{ create_inst_user.json.id }}{% endif %}"

- name: Check institutional user login record
  uri:
    url: "{{ okapi_url }}/authn/credentials-existence?userId={{ inst_user_uuid }}"
    headers:
      X-Okapi-Tenant: "{{ tenant }}"
      X-Okapi-Token: "{{ tenant_admin_login.x_okapi_token|default('token') }}"
      Accept: application/json
    status_code: 200
  register: check_inst_login

- name: Create institutional user login record
  uri:
    url: "{{ okapi_url }}/authn/credentials"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: "{{ tenant }}"
      X-Okapi-Token: "{{ tenant_admin_login.x_okapi_token|default('token') }}"
      Accept: application/json
    body: |
      {
        "userId": "{{ inst_user_uuid }}",
        "password": "{{ inst_user.password }}"
      }
    status_code: 201
  when: check_inst_login.json.credentialsExist == false
  register: create_inst_login
  changed_when: create_inst_login.status == 201

- name: Check institutional user permissions record
  uri:
    url: "{{ okapi_url }}/perms/users?query=userId%3d%3d{{ inst_user_uuid }}"
    headers:
      X-Okapi-Tenant: "{{ tenant }}"
      X-Okapi-Token: "{{ tenant_admin_login.x_okapi_token|default('token') }}"
      Accept: application/json
    status_code: 200
  register: check_inst_perms

- name: Create institutional user permissions record
  uri:
    url: "{{ okapi_url }}/perms/users"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: "{{ tenant }}"
      X-Okapi-Token: "{{ tenant_admin_login.x_okapi_token|default('token') }}"
      Accept: application/json
    body: |
      {
        "userId": "{{ inst_user_uuid }}"
      }
    status_code: 201
  when: check_inst_perms.json.totalRecords == 0
  register: create_inst_perms
  changed_when: create_inst_perms.status == 201

- name: Get institutional user perms UUID
  set_fact:
    inst_perms_uuid: "{% if check_inst_perms.json.permissionUsers.0|default(false) %}{{ check_inst_perms.json.permissionUsers.0.id }}{% else %}{{ create_inst_perms.json.id }}{% endif %}"

- name: Get assigned permissions for institutional user
  set_fact:
    inst_user_assigned_perms: "{% if check_inst_perms.json.permissionUsers.0|default(false) %}{{ check_inst_perms.json.permissionUsers.0.permissions }}{% else %}{{ [ ] }}{% endif %}"

- name: Assign permissions to {{ inst_user.username }}
  uri:
    url: "{{ okapi_url }}/perms/users/{{ inst_perms_uuid }}/permissions"
    method: POST
    headers:
      X-Okapi-Tenant: "{{ tenant }}"
      X-Okapi-Token: "{{ tenant_admin_login.x_okapi_token|default('token') }}"
      Accept: application/json
    body: '{ "permissionName" : "{{ item }}" }'
    body_format: json
    status_code: 200
  when: "[ item ]|difference(inst_user_assigned_perms)"
  register: inst_user_assign_perms
  with_items: "{{ inst_user_perms }}"
  changed_when: inst_user_assign_perms.status == 200

# Get module version
- name: Get tenant modules
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/{{ tenant }}/modules"
    headers:
      X-Okapi-Tenant: "supertenant"
      X-Okapi-Token: "{{ supertenant_token | default('') }}"
      Accept: application/json
  register: tenant_modules

- name: Reset tenant_module_id
  set_fact:
    tenant_module_id: ''

- name: Get ID of module for tenant
  set_fact:
    tenant_module_id: "{{ item.id }}"
  when: item.id is search(edge_module)
  with_items: "{{ tenant_modules.json }}"

- fail: msg="{{ edge_module }} not initialized for {{ tenant }}"
  when: tenant_module_id == ''

- name: Get version
  set_fact:
    edge_module_version: "{{ tenant_module_id|regex_search('([0-9]+\\.[0-9]+\\.[0-9]+.*$)') }}"

# Launch container
- name: Launch container for edge module
  become: yes
  docker_container:
    name: "{{ edge_module }}-{{ edge_module_version }}"
    image: "{{ edge_docker_repo }}/{{ edge_module }}:{{ edge_module_version }}"
    env: "{{ edge_module_docker_env }}"
    command:
      - "-Dokapi_url={{ edge_module_okapi_url }} -Dsecure_store_props=/mnt/{{ edge_module }}-ephemeral.properties"
    keep_volumes: no
    published_ports: "{{ edge_module_publish_port }}:{{ edge_module_expose_port }}"
    restart_policy: always
    state: started
    volumes: "{{ edge_conf_dir }}:/mnt"
    memory: "{{ edge_module_memory }}"

# Set up nginx proxy
- name: Copy edge_module_path
  set_fact:
    edge_module_path_working: "{{ edge_module_path }}"

- name: Turn edge_module_path into a list
  set_fact:
    edge_module_path_working: "{{ [ edge_module_path_working ] }}"
  when: edge_module_path_working|type_debug != "list"

- name: Configure nginx
  become: yes
  blockinfile:
    dest: /etc/nginx/sites-available/edge
    marker: "# {mark} {{ edge_module }}-{{ path_idx }} ANSIBLE MANAGED BLOCK"
    insertbefore: "^}\\s*$"
    block: |
      location {{ item }} {
        proxy_pass http://localhost:{{ edge_module_publish_port }};
      }
  notify: Restart nginx
  loop: "{{ edge_module_path_working }}"
  loop_control:
    index_var: path_idx

- meta: flush_handlers
