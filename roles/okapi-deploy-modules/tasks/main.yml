---
# Role to set up service for Okapi deployment
# Modules can either be listed in folio_modules variable (see okapi-register-modules role)
# Or this can set up the service with no modules (see okapi-pull role)

# wait a few seconds to make sure okapi is fully running
- wait_for: timeout=10

- name: Set up conf directory
  become: yes
  file: state=directory path={{ folio_conf }}/deployment-descriptors

- name: Pull Docker images
  become: yes
  docker_image: name={{ item.image_repository|default(docker_repo) }}/{{ item.name }}:{{ 'latest' if item.docker_tag is not defined or item.docker_tag == 'latest' else item.docker_tag }}
  when: item.okapi_docker_pull|default("true") == "false"
  with_items: "{{ folio_modules }}"

- set_fact: folio_modules_withid=[]
  when: folio_modules_withid is not defined

- name: Copy deployment descriptors
  become: yes
  template: src=DeploymentDescriptor.json.j2 dest={{ folio_conf }}/deployment-descriptors/{{ item.name }}.json
  with_items: "{{ folio_modules_withid }}"
  notify:
    - Restart okapi-deploy

- name: Set up home directory
  become: yes
  file: state=directory path={{ okapi_deploy_home }}/bin

- name: Create postgresql user(s)
  postgresql_user:
    db: postgres
    login_host: "{{ pg_host }}"
    login_user: "{{ pg_admin_user }}"
    login_password: "{{ pg_admin_password }}"
    name: "{{ item.pg_user }}"
    password: "{{ item.pg_password }}"
    role_attr_flags: SUPERUSER
    no_password_changes: yes
  when: item.storage is defined and item.storage == "postgres"
  with_items: "{{ folio_modules }}"

- name: Create db(s)
  postgresql_db:
    login_host: "{{ pg_host }}"
    login_user: "{{ item.pg_user }}"
    login_password: "{{ item.pg_password }}"
    name: "{{ item.database }}"
    owner: "{{ item.pg_user }}"
  when: item.storage is defined and item.storage == "postgres"
  with_items: "{{ folio_modules }}"
  
- name: Copy okapi-deploy.conf (do not overwrite if already in place)
  become: yes
  template: src=okapi-deploy.conf.j2 dest={{ folio_conf }}/okapi-deploy.conf force=no
  notify:
    - Restart okapi-deploy

- name: Copy okapi-deploy.env
  become: yes
  template: src=okapi-deploy.env.j2 dest=/etc/default/okapi-deploy
  notify:
    - Restart okapi-deploy

- name: Copy okapi-deploy.sh
  become: yes
  copy: src=okapi-deploy.sh dest={{ okapi_deploy_home }}/bin/okapi-deploy.sh mode=0755
  notify:
    - Restart okapi-deploy

- name: Copy okapi-deploy.service file
  become: yes
  template: src=okapi-deploy.service.j2 dest=/etc/systemd/system/okapi-deploy.service
  register: okapi_deploy_service_update
  notify:
    - Restart okapi-deploy

- name: systemctl daemon-reload
  become: yes
  command: systemctl daemon-reload
  when: okapi_deploy_service_update.changed

- name: Enable okapi-deploy service
  become: yes
  service: name=okapi-deploy enabled=yes

# Will fail if any modules not registered
- name: Check module registration
  uri:
    url: "{{ okapi_url }}/_/proxy/modules/{{ item.module_id }}"
  with_items: "{{ folio_modules_withid }}"

# Notify restart handler if any module not already deployed
- name: Check module deployment
  uri:
    url: "{{ okapi_url }}/_/discovery/modules/{{ item.module_id }}"
    status_code: 200, 404
  with_items: "{{ folio_modules_withid }}"
  register: module_deployment
  changed_when: module_deployment.status == 404
  notify:
    - Restart okapi-deploy

- meta: flush_handlers

- name: Start okapi-deploy service
  become: yes
  service: name=okapi-deploy state=started

