---
# Role to bootstrap a tenant admin user
#

# wait a few seconds to make sure modules are spun up
- wait_for: timeout=5

####################
# Set up variables #
####################

- name: Set admin_user ID
  set_fact: admin_user_id="{{ 9999999999999999999999 | random | to_uuid }}"

#####################
# Disable authtoken #
#####################

- name: Find ID of authtoken module, if enabled
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/{{ tenant }}/interfaces/authtoken"
    headers:
      X-Okapi-Tenant: "supertenant"
      X-Okapi-Token: "{{ supertenant_token | default('') }}"
      Accept: "application/json, text/plain"
  register: authtoken_module

- name: Disable authtoken without dependency checking
  uri:
    url: "{{ okapi_url }}/_/proxy/tenants/{{ tenant }}/install?depCheck=false"
    method: POST
    body_format: json
    headers:
      X-Okapi-Tenant: "supertenant"
      X-Okapi-Token: "{{ supertenant_token | default('') }}"
      Accept: "application/json, text/plain"
    body: '[ { "id": "{{ authtoken_module.json.0.id }}", "action": "disable" } ]'
  register: authtoken_disable
  when: authtoken_module.json.0 is defined

########################
# Bootstrap admin user #
########################

- name: Bootstrap admin user
  block:
    - name: Check for user record
      uri:
        url: "{{ okapi_url }}/users?query=username%3d%3d{{ admin_user.username }}"
        headers:
          Accept: "application/json, text/plain"
          X-Okapi-Tenant: "{{ tenant }}"
      register: check_user
    - name: Get user ID if user already exists
      set_fact:
        admin_user_id: "{{ check_user.json.users.0.id }}"
      when: check_user.json.totalRecords > 0
    - name: Create user record
      uri:
        url: "{{ okapi_url }}/users"
        method: POST
        body_format: json
        headers:
          Accept: "application/json, text/plain"
          X-Okapi-Tenant: "{{ tenant }}"
        body: |
          {
            "id": "{{ admin_user_id }}",
            "username": "{{ admin_user.username }}",
            "active": true,
            "personal": {
              "lastName": "{{ admin_user.last_name|default('') }}",
              "firstName": "{{ admin_user.first_name|default('') }}",
              "email": "{{ admin_user.email|default('') }}"
            }
          }
        status_code: 201
      register: create_user
      changed_when: create_user.status == 201
      when: check_user.json.totalRecords == 0
    - name: Check for login record
      uri:
        url: "{{ okapi_url }}/authn/credentials-existence?userId={{ admin_user_id }}"
        headers:
          Accept: "application/json, text/plain"
          X-Okapi-Tenant: "{{ tenant }}"
      register: check_login
    - name: Create login record
      uri:
        url: "{{ okapi_url }}/authn/credentials"
        method: POST
        body_format: json
        headers:
          Accept: "application/json, text/plain"
          X-Okapi-Tenant: "{{ tenant }}"
        body: |
          {
            "userId": "{{ admin_user_id }}",
            "password": "{{ admin_user.password }}"
          }
        status_code: 201
      register: create_login
      changed_when: create_login.status == 201
      when: check_login.json.credentialsExist == false
    - name: Check for permissions record
      uri:
        url: "{{ okapi_url }}/perms/users?query=userId%3d%3d{{ admin_user_id }}"
        headers:
          Accept: "application/json, text/plain"
          X-Okapi-Tenant: "{{ tenant }}"
      register: check_perms
    - name: Create permissions record
      uri:
        url: "{{ okapi_url }}/perms/users"
        method: POST
        body_format: json
        headers:
          Accept: "application/json, text/plain"
          X-Okapi-Tenant: "{{ tenant }}"
        body: |
          {
            "userId": "{{ admin_user_id }}",
            "permissions": [
          {% if perms_users_assign|default(false) %}
              "perms.users.assign.immutable",
              "perms.users.assign.mutable",
              "perms.users.assign.okapi",
          {% endif %}
              "perms.all"
            ]
          }
        status_code: 201
      register: create_login
      changed_when: create_login.status == 201
      when: check_perms.json.totalRecords == 0
    - name: Check for service-points-users interface
      uri:
        url: "{{ okapi_url }}/_/proxy/tenants/{{ tenant }}/interfaces/service-points-users"
        headers:
          X-Okapi-Tenant: "supertenant"
          X-Okapi-Token: "{{ supertenant_token | default('') }}"
          Accept: "application/json, text/plain"
      register: check_sp_users_int
    - name: Check for service-points-users record
      uri:
        url: "{{ okapi_url }}/service-points-users?query=userId%3d%3d{{ admin_user_id }}"
        headers:
          Accept: "application/json, text/plain"
          X-Okapi-Tenant: "{{ tenant }}"
      register: check_sp_user
      when: check_sp_users_int.json|default([])|length > 0
    - name: Get service points
      uri:
        url: "{{ okapi_url }}/service-points"
        headers:
          Accept: application/json
          X-Okapi-Tenant: "{{ tenant }}"
      register: service_points
      when: check_sp_users_int.json|default([])|length > 0 and check_sp_user.json.totalRecords == 0
    - name: Set list of service point ids
      set_fact: service_points_ids={{ '\"' + service_points|json_query('json.servicepoints[*].id')|join('\", \"') + '\"' }}
      when: check_sp_users_int.json|default([])|length > 0 and check_sp_user.json.totalRecords == 0
    # This can safely fail
    - name: Create service points user
      uri:
        url: "{{ okapi_url }}/service-points-users"
        method: POST
        body_format: json
        headers:
          Accept: application/json
          X-Okapi-Tenant: "{{ tenant }}"
        status_code: 201,422
        body: >-
          {
          "userId": "{{ admin_user_id }}",
          "servicePointsIds": [ {{ service_points_ids }} ],
          "defaultServicePointId": "{{ service_points|json_query('json.servicepoints[*].id')|first }}"
          }
      register: create_sp_user
      changed_when: create_sp_user.status == 201
      when: check_sp_users_int.json|default([])|length > 0 and check_sp_user.json.totalRecords == 0
      ignore_errors: yes
  always:
    ####################
    # Enable authtoken #
    ####################
    - name: Build authtoken_enable list
      set_fact:
        authtoken_enable: "{{ authtoken_enable|default([]) + [ { 'id': item.id, 'action': 'enable' } ] }}"
      when: authtoken_module.json.0 is defined
      with_items: "{{ authtoken_disable.json|reverse|list }}"

    - name: Enable authtoken
      uri:
        url: "{{ okapi_url }}/_/proxy/tenants/{{ tenant }}/install?depCheck=false"
        method: POST
        body_format: json
        headers:
          X-Okapi-Tenant: "supertenant"
          X-Okapi-Token: "{{ supertenant_token | default('') }}"
          Accept: "application/json, text/plain"
        body: "{{ authtoken_enable }}"
      register: authtoken_enable_result
      when: authtoken_module.json.0 is defined
