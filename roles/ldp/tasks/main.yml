---
# see https://github.com/library-data-platform/ldp/blob/master/doc/Admin_Guide.md
# use create-database role to make admin user, and assign role to pg admin user if RDS

- name: Create database and ldp admin user for ldp tenants
  include_role:
    name: create-database
  vars:
    db_admin_user: "{{ pg_admin_user }}"
    db_admin_password: "{{ pg_admin_password }}"
    database_name: "{{ ldp_db }}"
    db_admin_user: "{{ ldp_admin_user }}"
    db_admin_password: "{{ ldp_admin_password }}"
  when: not update_only

# create additional config and ldp users
- name: Create ldpconfig user for {{ tenant }}
  postgresql_user:
    user: "{{ ldpconfig_user }}"
    password: "{{ ldpconfig_password }}"
    login_host: "{{ pg_host }}"
    port: "{{ pg_port }}"
    db: "{{ ldp_db }}"
    login_user: "{{ pg_admin_user }}"
    login_password: "{{ pg_admin_password }}"
  when: not update_only

- name: Create ldp user for {{ tenant }}
  postgresql_user:
    user: "{{ ldp_user }}"
    password: "{{ ldp_password }}"
    login_host: "{{ pg_host }}"
    port: "{{ pg_port }}"
    db: "{{ ldp_db }}"
    login_user: "{{ pg_admin_user }}"
    login_password: "{{ pg_admin_password }}"
  when: not update_only

# assign perms for additional users
- name: GRANT USAGE ON SCHEMA public TO {{ ldpconfig_user }}
  postgresql_privs:
    login_host: "{{ pg_host }}"
    login_user: "{{ pg_admin_user }}"
    login_password: "{{ pg_admin_password }}"
    port: "{{ pg_port }}"
    db: "{{ ldp_db }}"
    type: schema
    obj: public
    roles: "{{ ldpconfig_user }}"
    privs: USAGE
    state: present
  when: not update_only

- name: GRANT USAGE ON SCHEMA public TO {{ ldp_user }}
  postgresql_privs:
    login_host: "{{ pg_host }}"
    login_user: "{{ pg_admin_user }}"
    login_password: "{{ pg_admin_password }}"
    port: "{{ pg_port }}"
    db: "{{ ldp_db }}"
    type: schema
    obj: public
    roles: "{{ ldp_user }}"
    privs: USAGE
    state: present
  when: not update_only

#- name: Create LDP cron group
#  group:
#    name: "{{ ldp_cron_group }}"
#  become: yes
#  when: not init_only
#
#- name: Create LDP cron user
#  user:
#    name: "{{ ldp_cron_user }}"
#    group: "{{ ldp_cron_group }}"
#    home: "{{ ldp_cron_home }}"
#    password: "*"
#    comment: "LDP Cron User"
#  become: yes
#  when: not init_only

- name: Create directory for ini files
  file:
    path: "{{ ldp_config_dir }}"
    state: directory
  become: yes
  when: ldp_use_odbc

- name: template odbc.ini
  template:
    src: odbc.ini.j2
    dest: "{{ ldp_config_dir }}/odbc.ini"
    mode: 0644
  become: yes
  when: ldp_use_odbc

- name: template odbcinst.ini
  template:
    src: odbcinst.ini.j2
    dest: "{{ ldp_config_dir }}/odbcinst.ini"
    mode: 0644
  become: yes
  when: ldp_use_odbc

- name: Create directory ldp data dir
  file:
    path: "{{ ldp_data_dir }}"
    state: directory
  become: yes

- name: template ldpconf.json
  template:
    src: ldpconf.json.j2
    dest: "{{ ldp_data_dir }}/ldpconf.json"
    mode: 0644
  become: yes

- name: test if init has already been run
  postgresql_query:
    db: ldp
    login_host: "{{ pg_host }}"
    login_user: "{{ pg_admin_user }}"
    login_password: "{{ pg_admin_password }}"
    query: SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'user_users')
  register: check_init

- name: run ldp init with ODBC
  docker_container:
    name: ldp_init
    image: "{{ ldp_docker_image }}"
    command: "init-database -D /var/lib/ldp --profile folio"
    detach: false
    volumes:
      - "{{ ldp_config_dir }}/odbc.ini:/root/.odbc.ini"
      - "{{ ldp_config_dir }}/odbcinst.ini:/root/.odbcinst.ini"
      - "{{ ldp_data_dir }}:/var/lib/ldp:rw"
  become: yes
  when: ldp_use_odbc and not check_init.query_result[0].exists and not update_only

- name: run ldp init with libpq
  docker_container:
    name: ldp_init
    image: "{{ ldp_docker_image }}"
    command: "init-database -D /var/lib/ldp --profile folio"
    detach: false
    volumes:
      - "{{ ldp_data_dir }}:/var/lib/ldp:rw"
  become: yes
  when: not ldp_use_odbc and not check_init.query_result[0].exists and not update_only

- name: warn init is not complete update only
  debug: msg="LDP database has not been initialized"
  when: not check_init.query_result[0].exists and update_only

- name: pause for init container
  pause:
    seconds: 3
  when: not check_init.query_result[0].exists and not update_only

# LDP udpate tasks
- name: set fact for existing user groups
  set_fact:
    grp: "{{ lookup('file', '/etc/group') }}"

- name: Create LDP group
  group:
    name: "{{ ldp_cron_group }}"
  become: yes
  when: (not init_only) and ('docker' in grp)

- name: Add the user ldpcron user
  ansible.builtin.user:
    name: "{{ ldp_cron_user }}"
    shell: /bin/bash
    home: "{{ ldp_cron_home }}"
    groups: "{{ ldp_cron_group }},docker"
    append: yes
  become: yes
  when: (not init_only) and ('docker' in grp)

- name: template ldp update script
  template:
    src: ldp_update.j2
    dest: "{{ ldp_cron_home }}/ldp_update"
    owner: "{{ ldp_cron_user }}"
    group: "{{ ldp_cron_group }}"
    mode: a+x
  become: yes
  when: (not init_only) and ('docker' in grp)

- name: Set up LDP update cron job
  ansible.builtin.cron:
    name: ldp update
    minute: "12"
    user: "{{ ldp_cron_user }}"
    job: "{{ ldp_cron_home }}/ldp_update"
    cron_file: ansible_ldp_update
  become: yes
  when: (not init_only) and ('docker' in grp)

- name: clone derived tables repo
  git:
    repo: "{{ ldp_derived_tables_repo }}"
    version: "{{ ldp_derived_tables_version }}"
    dest: "{{ ldp_cron_home }}/derived_tables_repo"
  become: yes
  become_user: "{{ ldp_cron_user }}"
  when: (not init_only) and ('docker' in grp)

- name: Setup folio_reporting schema for derived tables
  postgresql_query:
    db: ldp
    login_host: "{{ pg_host }}"
    login_user: "{{ pg_admin_user }}"
    login_password: "{{ pg_admin_password }}"
    query: "{{ item }}"
  with_items: "{{ reporting_setup_queries }}"
  when: (not init_only) and ('docker' in grp)

- name: template .pgpass
  template:
    src: pgpass.j2
    mode: 0600
    dest: "{{ ldp_cron_home }}/.pgpass"
    owner: "{{ ldp_cron_user }}"
    group: "{{ ldp_cron_group }}"
  become: yes
  when: (not init_only) and ('docker' in grp)
  when: (not init_only) and ('docker' in grp)

- name: template ldp derived_tables script
  template:
    src: derived_tables.j2
    dest: "{{ ldp_cron_home }}/derived_tables"
    mode: a+x
    owner: "{{ ldp_cron_user }}"
    group: "{{ ldp_cron_group }}"
  become: yes
  when: (not init_only) and ('docker' in grp)

- name: Set up derived tables update cron job
  ansible.builtin.cron:
    name: ldp derived tables
    minute: "21"
    user: "{{ ldp_cron_user }}"
    job: "{{ ldp_cron_home }}/derived_tables"
    cron_file: ansible_ldp_derived_tables
  become: yes
  when: not init_only
  when: (not init_only) and ('docker' in grp)
